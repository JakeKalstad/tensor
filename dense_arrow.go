// Code generated by genlib2. DO NOT EDIT.

package tensor

import (
	"fmt"

	"github.com/apache/arrow/go/arrow"
	arrowArray "github.com/apache/arrow/go/arrow/array"
)

// FromArrowArray converts an "arrow/array".Interface into a Tensor.
func FromArrowArray(a arrowArray.Interface) *Dense {
	a.Retain()

	r := a.Len()

	// TODO(poopoothegorilla): instead of creating bool ValidMask maybe
	// bitmapBytes can be used from arrow API
	mask := make([]bool, r)
	for i := 0; i < r; i++ {
		mask[i] = a.IsNull(i)
	}

	switch a.DataType() {
	case arrow.PrimitiveTypes.Float64:
		backing := a.(*arrowArray.Float64).Float64Values()
		retVal := New(WithBacking(backing, mask), WithShape(r, 1))
		return retVal
	default:
		panic(fmt.Sprintf("Unsupported Arrow DataType - %v", a.DataType()))
	}

	panic("Unreachable")
}
